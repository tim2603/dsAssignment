// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.1
// source: Communication.proto

package ds

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EmptyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyMessage) Reset() {
	*x = EmptyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Communication_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyMessage) ProtoMessage() {}

func (x *EmptyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_Communication_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyMessage.ProtoReflect.Descriptor instead.
func (*EmptyMessage) Descriptor() ([]byte, []int) {
	return file_Communication_proto_rawDescGZIP(), []int{0}
}

type TournamentTreeValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerId *WorkerID `protobuf:"bytes,1,opt,name=workerId,proto3" json:"workerId,omitempty"`
	Value    string    `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TournamentTreeValue) Reset() {
	*x = TournamentTreeValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Communication_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentTreeValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentTreeValue) ProtoMessage() {}

func (x *TournamentTreeValue) ProtoReflect() protoreflect.Message {
	mi := &file_Communication_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentTreeValue.ProtoReflect.Descriptor instead.
func (*TournamentTreeValue) Descriptor() ([]byte, []int) {
	return file_Communication_proto_rawDescGZIP(), []int{1}
}

func (x *TournamentTreeValue) GetWorkerId() *WorkerID {
	if x != nil {
		return x.WorkerId
	}
	return nil
}

func (x *TournamentTreeValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerId *WorkerID `protobuf:"bytes,1,opt,name=workerId,proto3" json:"workerId,omitempty"`
	Address  string    `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Communication_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_Communication_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_Communication_proto_rawDescGZIP(), []int{2}
}

func (x *Address) GetWorkerId() *WorkerID {
	if x != nil {
		return x.WorkerId
	}
	return nil
}

func (x *Address) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type Heartbeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerId *WorkerID `protobuf:"bytes,1,opt,name=workerId,proto3" json:"workerId,omitempty"`
}

func (x *Heartbeat) Reset() {
	*x = Heartbeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Communication_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Heartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartbeat) ProtoMessage() {}

func (x *Heartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_Communication_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartbeat.ProtoReflect.Descriptor instead.
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return file_Communication_proto_rawDescGZIP(), []int{3}
}

func (x *Heartbeat) GetWorkerId() *WorkerID {
	if x != nil {
		return x.WorkerId
	}
	return nil
}

type MapTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filenames []string `protobuf:"bytes,1,rep,name=filenames,proto3" json:"filenames,omitempty"`
}

func (x *MapTask) Reset() {
	*x = MapTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Communication_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapTask) ProtoMessage() {}

func (x *MapTask) ProtoReflect() protoreflect.Message {
	mi := &file_Communication_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapTask.ProtoReflect.Descriptor instead.
func (*MapTask) Descriptor() ([]byte, []int) {
	return file_Communication_proto_rawDescGZIP(), []int{4}
}

func (x *MapTask) GetFilenames() []string {
	if x != nil {
		return x.Filenames
	}
	return nil
}

type ReduceTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntermediateFile []string `protobuf:"bytes,1,rep,name=intermediateFile,proto3" json:"intermediateFile,omitempty"`
}

func (x *ReduceTask) Reset() {
	*x = ReduceTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Communication_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReduceTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReduceTask) ProtoMessage() {}

func (x *ReduceTask) ProtoReflect() protoreflect.Message {
	mi := &file_Communication_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReduceTask.ProtoReflect.Descriptor instead.
func (*ReduceTask) Descriptor() ([]byte, []int) {
	return file_Communication_proto_rawDescGZIP(), []int{5}
}

func (x *ReduceTask) GetIntermediateFile() []string {
	if x != nil {
		return x.IntermediateFile
	}
	return nil
}

type MapTaskResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MapTaskResult) Reset() {
	*x = MapTaskResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Communication_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapTaskResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapTaskResult) ProtoMessage() {}

func (x *MapTaskResult) ProtoReflect() protoreflect.Message {
	mi := &file_Communication_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapTaskResult.ProtoReflect.Descriptor instead.
func (*MapTaskResult) Descriptor() ([]byte, []int) {
	return file_Communication_proto_rawDescGZIP(), []int{6}
}

type ReduceTaskResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReduceTaskResult) Reset() {
	*x = ReduceTaskResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Communication_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReduceTaskResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReduceTaskResult) ProtoMessage() {}

func (x *ReduceTaskResult) ProtoReflect() protoreflect.Message {
	mi := &file_Communication_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReduceTaskResult.ProtoReflect.Descriptor instead.
func (*ReduceTaskResult) Descriptor() ([]byte, []int) {
	return file_Communication_proto_rawDescGZIP(), []int{7}
}

type WorkerID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerId string `protobuf:"bytes,1,opt,name=workerId,proto3" json:"workerId,omitempty"`
}

func (x *WorkerID) Reset() {
	*x = WorkerID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Communication_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerID) ProtoMessage() {}

func (x *WorkerID) ProtoReflect() protoreflect.Message {
	mi := &file_Communication_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerID.ProtoReflect.Descriptor instead.
func (*WorkerID) Descriptor() ([]byte, []int) {
	return file_Communication_proto_rawDescGZIP(), []int{8}
}

func (x *WorkerID) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

type TournamentTreeSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selected bool `protobuf:"varint,1,opt,name=selected,proto3" json:"selected,omitempty"`
}

func (x *TournamentTreeSelection) Reset() {
	*x = TournamentTreeSelection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Communication_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TournamentTreeSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TournamentTreeSelection) ProtoMessage() {}

func (x *TournamentTreeSelection) ProtoReflect() protoreflect.Message {
	mi := &file_Communication_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TournamentTreeSelection.ProtoReflect.Descriptor instead.
func (*TournamentTreeSelection) Descriptor() ([]byte, []int) {
	return file_Communication_proto_rawDescGZIP(), []int{9}
}

func (x *TournamentTreeSelection) GetSelected() bool {
	if x != nil {
		return x.Selected
	}
	return false
}

var File_Communication_proto protoreflect.FileDescriptor

var file_Communication_proto_rawDesc = []byte{
	0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x64, 0x73, 0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x55, 0x0a, 0x13, 0x54, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x65, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x28, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x4d, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x28, 0x0a, 0x08, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x64, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x52, 0x08, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x35, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x28, 0x0a, 0x08,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x64, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x52, 0x08, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x07, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22,
	0x38, 0x0a, 0x0a, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2a, 0x0a,
	0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x0f, 0x0a, 0x0d, 0x4d, 0x61, 0x70,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x52, 0x65,
	0x64, 0x75, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x26,
	0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x17, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x65, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x32, 0xe6, 0x02,
	0x0a, 0x1e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x69, 0x74, 0x68, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x36, 0x0a, 0x13, 0x53, 0x65, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x0b, 0x2e, 0x64, 0x73, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x1a, 0x10, 0x2e, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x15, 0x53, 0x65, 0x6e, 0x64,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x54, 0x6f, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x0d, 0x2e, 0x64, 0x73, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x1a, 0x10, 0x2e, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x1a, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x62,
	0x6f, 0x75, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x0c, 0x2e, 0x64, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x44,
	0x1a, 0x10, 0x2e, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x1d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x62,
	0x6f, 0x75, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x64, 0x75, 0x63,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0c, 0x2e, 0x64, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x49, 0x44, 0x1a, 0x10, 0x2e, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x1e, 0x53, 0x65, 0x6e, 0x64, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x72, 0x65, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x17, 0x2e, 0x64, 0x73, 0x2e, 0x54,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x65, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0x10, 0x2e, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x32, 0xa1, 0x02, 0x0a, 0x1e, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x0d, 0x61, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0b, 0x2e, 0x64, 0x73, 0x2e,
	0x4d, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x1a, 0x10, 0x2e, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x10, 0x61,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12,
	0x0e, 0x2e, 0x64, 0x73, 0x2e, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x1a,
	0x10, 0x2e, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x23, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x65,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x64, 0x73, 0x2e,
	0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x65, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x10, 0x2e, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x15, 0x72,
	0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x72, 0x65, 0x65, 0x12, 0x10, 0x2e, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x10, 0x2e, 0x64, 0x73, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x42, 0x05, 0x5a, 0x03, 0x64, 0x73,
	0x2f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Communication_proto_rawDescOnce sync.Once
	file_Communication_proto_rawDescData = file_Communication_proto_rawDesc
)

func file_Communication_proto_rawDescGZIP() []byte {
	file_Communication_proto_rawDescOnce.Do(func() {
		file_Communication_proto_rawDescData = protoimpl.X.CompressGZIP(file_Communication_proto_rawDescData)
	})
	return file_Communication_proto_rawDescData
}

var file_Communication_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_Communication_proto_goTypes = []interface{}{
	(*EmptyMessage)(nil),            // 0: ds.EmptyMessage
	(*TournamentTreeValue)(nil),     // 1: ds.TournamentTreeValue
	(*Address)(nil),                 // 2: ds.Address
	(*Heartbeat)(nil),               // 3: ds.Heartbeat
	(*MapTask)(nil),                 // 4: ds.MapTask
	(*ReduceTask)(nil),              // 5: ds.ReduceTask
	(*MapTaskResult)(nil),           // 6: ds.MapTaskResult
	(*ReduceTaskResult)(nil),        // 7: ds.ReduceTaskResult
	(*WorkerID)(nil),                // 8: ds.WorkerID
	(*TournamentTreeSelection)(nil), // 9: ds.TournamentTreeSelection
}
var file_Communication_proto_depIdxs = []int32{
	8,  // 0: ds.TournamentTreeValue.workerId:type_name -> ds.WorkerID
	8,  // 1: ds.Address.workerId:type_name -> ds.WorkerID
	8,  // 2: ds.Heartbeat.workerId:type_name -> ds.WorkerID
	2,  // 3: ds.CommunicationWithMasterService.SendAddressToMaster:input_type -> ds.Address
	3,  // 4: ds.CommunicationWithMasterService.SendHeartBeatToMaster:input_type -> ds.Heartbeat
	8,  // 5: ds.CommunicationWithMasterService.NotifyAboutFinishedMapTask:input_type -> ds.WorkerID
	8,  // 6: ds.CommunicationWithMasterService.NotifyAboutFinishedReduceTask:input_type -> ds.WorkerID
	1,  // 7: ds.CommunicationWithMasterService.SendCurrentTournamentTreeValue:input_type -> ds.TournamentTreeValue
	4,  // 8: ds.CommunicationWithWorkerService.assignMapTask:input_type -> ds.MapTask
	5,  // 9: ds.CommunicationWithWorkerService.assignReduceTask:input_type -> ds.ReduceTask
	9,  // 10: ds.CommunicationWithWorkerService.sendSelectedTournamentTreeSelection:input_type -> ds.TournamentTreeSelection
	0,  // 11: ds.CommunicationWithWorkerService.restartTournamentTree:input_type -> ds.EmptyMessage
	0,  // 12: ds.CommunicationWithMasterService.SendAddressToMaster:output_type -> ds.EmptyMessage
	0,  // 13: ds.CommunicationWithMasterService.SendHeartBeatToMaster:output_type -> ds.EmptyMessage
	0,  // 14: ds.CommunicationWithMasterService.NotifyAboutFinishedMapTask:output_type -> ds.EmptyMessage
	0,  // 15: ds.CommunicationWithMasterService.NotifyAboutFinishedReduceTask:output_type -> ds.EmptyMessage
	0,  // 16: ds.CommunicationWithMasterService.SendCurrentTournamentTreeValue:output_type -> ds.EmptyMessage
	0,  // 17: ds.CommunicationWithWorkerService.assignMapTask:output_type -> ds.EmptyMessage
	0,  // 18: ds.CommunicationWithWorkerService.assignReduceTask:output_type -> ds.EmptyMessage
	0,  // 19: ds.CommunicationWithWorkerService.sendSelectedTournamentTreeSelection:output_type -> ds.EmptyMessage
	0,  // 20: ds.CommunicationWithWorkerService.restartTournamentTree:output_type -> ds.EmptyMessage
	12, // [12:21] is the sub-list for method output_type
	3,  // [3:12] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_Communication_proto_init() }
func file_Communication_proto_init() {
	if File_Communication_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Communication_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Communication_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentTreeValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Communication_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Communication_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Heartbeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Communication_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Communication_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReduceTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Communication_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapTaskResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Communication_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReduceTaskResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Communication_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Communication_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TournamentTreeSelection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Communication_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_Communication_proto_goTypes,
		DependencyIndexes: file_Communication_proto_depIdxs,
		MessageInfos:      file_Communication_proto_msgTypes,
	}.Build()
	File_Communication_proto = out.File
	file_Communication_proto_rawDesc = nil
	file_Communication_proto_goTypes = nil
	file_Communication_proto_depIdxs = nil
}
